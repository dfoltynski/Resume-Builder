{"version":3,"sources":["webpack:///./src/utils/utils.js","webpack:///./node_modules/uuid/dist/esm-browser/rng.js","webpack:///./node_modules/uuid/dist/esm-browser/regex.js","webpack:///./node_modules/uuid/dist/esm-browser/stringify.js","webpack:///./node_modules/uuid/dist/esm-browser/validate.js","webpack:///./node_modules/uuid/dist/esm-browser/v4.js","webpack:///./node_modules/gatsby/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack:///./src/components/A4Container.jsx","webpack:///./src/components/ResumeDrawerItems/resumeDrawerStyles.js","webpack:///./src/components/ResumeDrawerItems/Items/List/ItemInput.jsx","webpack:///./src/components/ResumeDrawerItems/Items/List/ItemsList.jsx","webpack:///./src/store/actions/setResumeAwards.js","webpack:///./src/components/ResumeDrawerItems/Items/Awards.jsx","webpack:///./src/store/actions/setResumeBasics.js","webpack:///./src/components/ResumeDrawerItems/Items/Basics.jsx","webpack:///./src/store/actions/setResumeEducation.js","webpack:///./src/components/ResumeDrawerItems/Items/Education.jsx","webpack:///./src/store/actions/setResumeInterests.js","webpack:///./src/components/ResumeDrawerItems/Items/Interests.jsx","webpack:///./src/store/actions/setResumeLanguages.js","webpack:///./src/components/ResumeDrawerItems/Items/Languages.jsx","webpack:///./src/store/actions/setResumePublications.js","webpack:///./src/components/ResumeDrawerItems/Items/Publications.jsx","webpack:///./src/store/actions/setResumeReferences.js","webpack:///./src/components/ResumeDrawerItems/Items/References.jsx","webpack:///./src/store/actions/setResumeSkills.js","webpack:///./src/components/ResumeDrawerItems/Items/Skills.jsx","webpack:///./src/store/actions/setResumeVolunteer.js","webpack:///./src/components/ResumeDrawerItems/Items/Volunteer.jsx","webpack:///./src/store/actions/setResumeWork.js","webpack:///./src/components/ResumeDrawerItems/Items/Work.jsx","webpack:///./src/components/ResumeDrawerItems/ResumeDrawerItems.jsx","webpack:///./src/components/FloatingButton.jsx","webpack:///./src/pages/Build.jsx","webpack:///./src/utils/json-parser.js","webpack:///./node_modules/@material-ui/core/esm/Fab/Fab.js","webpack:///./node_modules/@material-ui/icons/Close.js","webpack:///./src/components/ResumeTemplates lazy ^\\.\\/.*\\/Index$ namespace object"],"names":["isObject","obj","constructor","Object","isObjectNotEmpty","keys","length","traverseObject","property","hasOwnProperty","value","enabled","capitalize","string","charAt","toUpperCase","slice","toLowerCase","varNameToString","varObj","getRandomValues","crypto","bind","msCrypto","rnds8","Uint8Array","rng","Error","uuid","test","byteToHex","push","toString","substr","arr","offset","arguments","undefined","TypeError","options","buf","rnds","random","i","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","apply","err","useStyles","makeStyles","theme","a4Container","backgroundColor","palette","background","paper","width","minHeight","position","top","left","visibility","pageBreakInside","borderBottom","alignCenter","margin","alignLeft","marginLeft","A4Container","children","customHeight","classes","style","height","className","classNames","resumeDrawerItemsWrapper","marginTop","minWidth","maxWidth","padding","listStyle","paddingLeft","content","resumeDrawerItem","borderTop","ItemInput","onChange","label","checked","id","type","htmlFor","ItemsList","onClick","setResumeAwards","awards","Awards","state","dispatch","useContext","StoreContext","setResumeAwardsState","newAwards","toggleAwardsDetail","award","propName","map","awd","JSON","stringify","currentState","title","date","awarder","summary","toggleAward","setResumeBasics","basics","Basics","setResumeBasicsState","newBasics","toggleBasicsDetail","toggleBasicsLocationDetail","location","basicsEnabled","name","picture","email","phone","website","locationEnabled","address","postalCode","city","countryCode","region","profiles","profile","network","pro","toggleBasicsProfilesDetail","setResumeEducation","education","Education","educations","setResumeEducationState","toggleEducationDetail","newEducation","edu","institution","area","studyType","startDate","endDate","gpa","courses","toggleEducation","setResumeInterests","interests","Interest","setResumeInterestsState","interest","keywords","newInterest","wrk","toggleInterest","vol","toggleInterestDetail","keyword","toggleInterestKeywords","setResumeLanguages","languages","Languages","setResumeLanguagesState","newLanguages","toggleLanguagesDetail","language","lang","fluency","toggleLanguage","setResumePublications","publications","Publications","setResumePublicationsState","newPublications","togglePublicationsDetail","publication","pub","publisher","releaseDate","togglePublication","setResumeReferences","references","References","setResumeReferencesState","newReferences","toggleReferencesDetail","reference","ref","toggleReference","setResumeSkills","skills","Skills","setResumeSkillsState","newSkills","toggleSkillsDetail","skill","skl","level","toggleSkill","setResumeVolunteer","volunteer","Volunteer","volunteerData","setResumeVolunteerState","toggleVolunteerDetail","newVolunteer","volunteerEnabled","volunteers","organization","highlights","toggleVolunteer","highlight","high","toggleVolunteerHighlights","setResumeWork","work","Work","workData","workEnabled","works","setResumeWorkState","newWork","toggleWorkDetail","oldWork","company","toggleWork","toggleWorkHighlights","actionButtons","display","printDocument","window","print","ResumeDrawerItems","resume","onClose","jsonResume","onPrint","intl","useIntl","Button","variant","color","disabled","formatMessage","downloadJson","handleDownloadJson","Interests","floatingButton","right","FloatingButton","Fab","aria-label","resumeWrapper","drawerWrapper","zIndex","importTemplate","template","lazy","catch","BuildPage","a4ContainerHeight","setA4ContainerHeight","useState","isDrawerOpen","setIsDrawerOpen","resumeTemplate","setResumeTemplate","refContainer","useRef","rerenderRef","togglableJsonResume","resumeTemplateName","hasData","useEffect","navigate","Template","loadTemplate","useCallback","resumeHeight","current","clientHeight","ratio","vhs","Math","ceil","parseFloat","toFixed","setTimeout","Layout","SEO","robots","Drawer","anchor","open","fallback","readJsonFile","file","callback","reader","FileReader","onload","e","target","result","onerror","readAsBinaryString","jsonString","timestamp","Date","getTime","document","createElement","Blob","href","URL","createObjectURL","download","click","props","_props$color","_props$component","component","_props$disabled","_props$disableFocusRi","disableFocusRipple","focusVisibleClassName","_props$size","size","_props$variant","other","root","extended","concat","primary","secondary","colorInherit","focusRipple","focusVisible","typography","button","boxSizing","transition","transitions","create","duration","short","borderRadius","boxShadow","shadows","getContrastText","grey","A100","action","disabledBackground","textDecoration","alignItems","justifyContent","contrastText","main","dark","sizeSmall","sizeMedium","_interopRequireDefault","defineProperty","exports","default","_react","_default","d","webpackAsyncContext","req","__webpack_require__","o","code","ids","module"],"mappings":"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","file":"component---src-pages-build-jsx-f863fed8bdfb74754f28.js","sourcesContent":["export const isObject = (obj) =>\r\n    typeof obj === 'object' && obj.constructor === Object;\r\n\r\nexport const isObjectEmpty = (obj) =>\r\n    isObject(obj) && Object.keys(obj).length === 0;\r\n\r\nexport const isObjectNotEmpty = (obj) =>\r\n    isObject(obj) && Object.keys(obj).length > 0;\r\n\r\nexport const traverseObject = (obj) => {\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for (const property in obj) {\r\n        // eslint-disable-next-line no-prototype-builtins\r\n        if (obj.hasOwnProperty(property)) {\r\n            if (typeof obj[property] === 'object') {\r\n                traverseObject(obj[property]);\r\n            }\r\n\r\n            // eslint-disable-next-line no-param-reassign\r\n            obj[property] = {\r\n                value: obj[property],\r\n                enabled: true,\r\n            };\r\n        }\r\n    }\r\n\r\n    return obj;\r\n};\r\n\r\nexport const capitalize = (string) =>\r\n    string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\r\n\r\nexport const varNameToString = (varObj) => Object.keys(varObj)[0];\r\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nvar getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    a4Container: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        width: '21cm',\r\n        minHeight: '29.7cm',\r\n        '@media print': {\r\n            // backgroundColor: theme.palette.background.paper,\r\n            '-webkit-print-color-adjust': 'exact',\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            visibility: 'visible !important',\r\n            '& *': {\r\n                visibility: 'visible !important',\r\n                '& div': {\r\n                    pageBreakInside: 'avoid',\r\n                    '&:last-child': {\r\n                        borderBottom: 'none',\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    },\r\n    alignCenter: {\r\n        margin: '0 auto',\r\n    },\r\n    alignLeft: {\r\n        marginLeft: 'calc(50% - (11.5cm + 120px))',\r\n        '@media print': {\r\n            margin: '0 auto',\r\n        },\r\n    },\r\n}));\r\n\r\nfunction A4Container({ children, customHeight, alignCenter = true }) {\r\n    const classes = useStyles();\r\n    let style = {};\r\n\r\n    if (customHeight) {\r\n        style = {\r\n            height: `${customHeight}vh`,\r\n        };\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={classNames(\r\n                classes.a4Container,\r\n                {\r\n                    [classes.alignCenter]: alignCenter,\r\n                    [classes.alignLeft]: !alignCenter,\r\n                }\r\n            )}\r\n            style={style}\r\n        >\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default A4Container;\r\n","export default {\r\n    resumeDrawerItemsWrapper: {\r\n        marginTop: '76px',\r\n        minWidth: '300px',\r\n        maxWidth: '350px',\r\n        padding: '5px 20px',\r\n        '& ul': { margin: '0', listStyle: 'none', paddingLeft: '25px' },\r\n        '& li': {\r\n            '&::before': {\r\n                content: \"'\\\\2192'\",\r\n                position: 'absolute',\r\n                marginLeft: '-20px',\r\n            },\r\n        },\r\n    },\r\n    resumeDrawerItem: {\r\n        padding: '10px 0',\r\n        borderTop: '1px solid #ddd',\r\n        '&:first-child': { borderTop: 'none' },\r\n    },\r\n};\r\n","import React, { Fragment } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { capitalize } from '../../../../utils/utils';\r\n\r\nconst ItemInput = ({ onChange, label, checked }) => {\r\n    const id = uuid();\r\n    return (\r\n        <Fragment>\r\n            <input\r\n                type=\"checkbox\"\r\n                onChange={onChange}\r\n                id={id}\r\n                checked={checked}\r\n            />\r\n            <label htmlFor={id}>\r\n                {capitalize(label)}\r\n            </label>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default ItemInput;\r\n","import React from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport ItemInput from './ItemInput';\r\n\r\nconst ItemsList = ({ onClick, label, checked }) => (\r\n    <li key={uuid()}>\r\n        <ItemInput\r\n            onChange={onClick}\r\n            label={label}\r\n            checked={checked}\r\n        />\r\n    </li>\r\n);\r\n\r\nexport default ItemsList;\r\n","const setResumeAwards = (awards) => ({\r\n    type: 'SET_RESUME_AWARDS',\r\n    awards,\r\n});\r\n\r\nexport default setResumeAwards;\r\n","import React, { Fragment, useContext } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n// Components\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport ItemInput from './List/ItemInput';\r\nimport ItemsList from './List/ItemsList';\r\n\r\n// Actions\r\nimport style from '../resumeDrawerStyles';\r\nimport setResumeAwards from '../../../store/actions/setResumeAwards';\r\nimport { varNameToString } from '../../../utils/utils';\r\nimport { StoreContext } from '../../../store/StoreProvider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction Awards({ awards }) {\r\n    const classes = useStyles();\r\n    const { state, dispatch } = useContext(StoreContext);\r\n\r\n    const setResumeAwardsState = (newAwards) => {\r\n        dispatch(setResumeAwards(newAwards));\r\n    };\r\n\r\n    const toggleAwards = () => {\r\n        const currentState = awards.enabled;\r\n        setResumeAwardsState({\r\n            ...awards,\r\n            enabled: !currentState,\r\n        });\r\n    };\r\n\r\n    const toggleAward = (award) => {\r\n        const newAwards = { ...awards };\r\n        newAwards.value =\r\n            newAwards.value.map((awd) => {\r\n                if (JSON.stringify(awd.value) === JSON.stringify(award.value)) {\r\n                    return {\r\n                        ...awd,\r\n                        enabled: !awd.enabled,\r\n                    };\r\n                }\r\n                return awd;\r\n            });\r\n        setResumeAwardsState(newAwards);\r\n    };\r\n\r\n    const toggleAwardsDetail = (award, propName) => {\r\n        const newAwards = { ...awards };\r\n        newAwards.value =\r\n            newAwards.value.map((awd) => {\r\n                if (JSON.stringify(awd.value) === JSON.stringify(award.value)) {\r\n                    return {\r\n                        ...awd,\r\n                        value: {\r\n                            ...awd.value,\r\n                            [propName]: {\r\n                                ...awd.value[propName],\r\n                                enabled: !awd.value[propName].enabled,\r\n                            },\r\n                        },\r\n                    };\r\n                }\r\n                return awd;\r\n            });\r\n        setResumeAwardsState(newAwards);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                label=\"awards\"\r\n                onChange={toggleAwards}\r\n                checked={awards.enabled}\r\n            />\r\n            {awards.enabled && (\r\n                <ul>\r\n                    {awards.value.map((award) => {\r\n                        const { title, date, awarder, summary } = award.value;\r\n                        return (\r\n                            <Fragment key={uuid()}>\r\n                                <ItemsList\r\n                                    label={title.value}\r\n                                    checked={award.enabled}\r\n                                    onClick={() => toggleAward(award)}\r\n                                />\r\n                                {award.enabled && (\r\n                                    <ul>\r\n                                        <ItemsList\r\n                                            label={varNameToString({ title })}\r\n                                            checked={title.enabled}\r\n                                            onClick={() => toggleAwardsDetail(\r\n                                                award,\r\n                                                varNameToString({ title })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ date })}\r\n                                            checked={date.enabled}\r\n                                            onClick={() => toggleAwardsDetail(\r\n                                                award,\r\n                                                varNameToString({ date })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ awarder })}\r\n                                            checked={awarder.enabled}\r\n                                            onClick={() => toggleAwardsDetail(\r\n                                                award,\r\n                                                varNameToString({ awarder })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ summary })}\r\n                                            checked={summary.enabled}\r\n                                            onClick={() => toggleAwardsDetail(\r\n                                                award,\r\n                                                varNameToString({ summary })\r\n                                            )}\r\n                                        />\r\n                                    </ul>\r\n                                )}\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Awards;\r\n","const setResumeBasics = (basics) => ({\r\n    type: 'SET_RESUME_BASICS',\r\n    basics,\r\n});\r\n\r\nexport default setResumeBasics;\r\n","import React, { Fragment, useContext } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport style from '../resumeDrawerStyles';\r\n\r\n// Components\r\nimport ItemInput from './List/ItemInput';\r\nimport ItemsList from './List/ItemsList';\r\n\r\n// Utils\r\n// Actions\r\nimport { varNameToString } from '../../../utils/utils';\r\nimport setResumeBasics from '../../../store/actions/setResumeBasics';\r\nimport { StoreContext } from '../../../store/StoreProvider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction Basics({ basics }) {\r\n    const classes = useStyles();\r\n    const { state, dispatch } = useContext(StoreContext);\r\n    const setResumeBasicsState = (newBasics) => {\r\n        dispatch(setResumeBasics(newBasics));\r\n    };\r\n\r\n    const toggleBasics = () => {\r\n        const currentState = basics.enabled;\r\n        setResumeBasicsState({\r\n            ...basics,\r\n            enabled: !currentState,\r\n        });\r\n    };\r\n\r\n    const toggleBasicsDetail = (propName) => {\r\n        const currentState =\r\n            basics.value[propName].enabled;\r\n        setResumeBasicsState({\r\n            ...basics,\r\n            value: {\r\n                ...basics.value,\r\n                [propName]: {\r\n                    ...basics.value[propName],\r\n                    enabled: !currentState,\r\n                },\r\n            },\r\n        });\r\n    };\r\n\r\n    const toggleBasicsLocationDetail = (propName) => {\r\n        const currentState =\r\n            basics.value.location.value[propName].enabled;\r\n        setResumeBasicsState({\r\n            ...basics,\r\n            value: {\r\n                ...basics.value,\r\n                location: {\r\n                    ...basics.value.location,\r\n                    value: {\r\n                        ...basics.value.location.value,\r\n                        [propName]: {\r\n                            ...basics.value.location.value[propName],\r\n                            enabled: !currentState,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    };\r\n\r\n    const toggleBasicsProfilesDetail = (profile) => {\r\n        const newBasics = { ...basics };\r\n        newBasics.value.profiles.value =\r\n            newBasics.value.profiles.value.map((pro) => {\r\n                if (JSON.stringify(pro.value) === JSON.stringify(profile.value)) {\r\n                    return {\r\n                        ...pro,\r\n                        enabled: !pro.enabled,\r\n                    };\r\n                }\r\n                return pro;\r\n            });\r\n        setResumeBasicsState(newBasics);\r\n    };\r\n\r\n    const {\r\n        enabled: basicsEnabled,\r\n        value: {\r\n            name,\r\n            label,\r\n            picture,\r\n            email,\r\n            phone,\r\n            website,\r\n            summary,\r\n            location: {\r\n                enabled: locationEnabled,\r\n                value: {\r\n                    address,\r\n                    postalCode,\r\n                    city,\r\n                    countryCode,\r\n                    region,\r\n                },\r\n            },\r\n            profiles,\r\n        },\r\n    } = basics;\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                label=\"basics\"\r\n                onChange={toggleBasics}\r\n                checked={basicsEnabled}\r\n            />\r\n            {basicsEnabled && (\r\n                <ul>\r\n                    {name && (\r\n                        <ItemsList\r\n                            label={varNameToString({ name })}\r\n                            checked={name.enabled}\r\n                            onClick={() => toggleBasicsDetail(\r\n                                varNameToString({ name })\r\n                            )}\r\n                        />\r\n                    )}\r\n                    {label && (\r\n                        <ItemsList\r\n                            label={varNameToString({ label })}\r\n                            checked={label.enabled}\r\n                            onClick={() => toggleBasicsDetail(\r\n                                varNameToString({ label })\r\n                            )}\r\n                        />\r\n                    )}\r\n                    <ItemsList\r\n                        label=\"location\"\r\n                        checked={locationEnabled}\r\n                        onClick={() => toggleBasicsDetail(\r\n                            'location'\r\n                        )}\r\n                    />\r\n                    {locationEnabled && (\r\n                        <ul>\r\n                            {address && (\r\n                                <ItemsList\r\n                                    label={varNameToString({ address })}\r\n                                    checked={address.enabled}\r\n                                    onClick={() => toggleBasicsLocationDetail(\r\n                                        varNameToString({ address })\r\n                                    )}\r\n                                />\r\n                            )}\r\n                            {city && (\r\n                                <ItemsList\r\n                                    label={varNameToString({ city })}\r\n                                    checked={city.enabled}\r\n                                    onClick={() => toggleBasicsLocationDetail(\r\n                                        varNameToString({ city })\r\n                                    )}\r\n                                />\r\n                            )}\r\n                            {region && (\r\n                                <ItemsList\r\n                                    label={varNameToString({ region })}\r\n                                    checked={region.enabled}\r\n                                    onClick={() => toggleBasicsLocationDetail(\r\n                                        varNameToString({ region })\r\n                                    )}\r\n                                />\r\n                            )}\r\n                            {postalCode && (\r\n                                <ItemsList\r\n                                    label={varNameToString({ postalCode })}\r\n                                    checked={postalCode.enabled}\r\n                                    onClick={() => toggleBasicsLocationDetail(\r\n                                        varNameToString({ postalCode })\r\n                                    )}\r\n                                />\r\n                            )}\r\n                            {countryCode && (\r\n                                <ItemsList\r\n                                    label={varNameToString({ countryCode })}\r\n                                    checked={countryCode.enabled}\r\n                                    onClick={() => toggleBasicsLocationDetail(\r\n                                        varNameToString({ countryCode })\r\n                                    )}\r\n                                />\r\n                            )}\r\n                        </ul>\r\n                    )}\r\n                    {website && (\r\n                        <ItemsList\r\n                            label={varNameToString({ website })}\r\n                            checked={website.enabled}\r\n                            onClick={() => toggleBasicsDetail(\r\n                                varNameToString({ website })\r\n                            )}\r\n                        />\r\n                    )}\r\n                    {phone && (\r\n                        <ItemsList\r\n                            label={varNameToString({ phone })}\r\n                            checked={phone.enabled}\r\n                            onClick={() => toggleBasicsDetail(\r\n                                varNameToString({ phone })\r\n                            )}\r\n                        />\r\n                    )}\r\n                    {email && (\r\n                        <ItemsList\r\n                            label={varNameToString({ email })}\r\n                            checked={email.enabled}\r\n                            onClick={() => toggleBasicsDetail(\r\n                                varNameToString({ email })\r\n                            )}\r\n                        />\r\n                    )}\r\n                    {profiles && (\r\n                        <Fragment>\r\n                            <ItemsList\r\n                                label={varNameToString({ profiles })}\r\n                                checked={profiles.enabled}\r\n                                onClick={() => toggleBasicsDetail(\r\n                                    varNameToString({ profiles })\r\n                                )}\r\n                            />\r\n                            {profiles.enabled && (\r\n                                <ul>\r\n                                    {profiles.value.map((profile) => {\r\n                                        const { network } = profile.value;\r\n                                        return (\r\n                                            <ItemsList\r\n                                                label={network.value}\r\n                                                key={uuid()}\r\n                                                checked={profile.enabled}\r\n                                                onClick={() => toggleBasicsProfilesDetail(\r\n                                                    profile\r\n                                                )}\r\n                                            />\r\n                                        );\r\n                                    })}\r\n                                </ul>\r\n                            )}\r\n                        </Fragment>\r\n                    )}\r\n                    {summary && (\r\n                        <ItemsList\r\n                            label={varNameToString({ summary })}\r\n                            checked={summary.enabled}\r\n                            onClick={() => toggleBasicsDetail(\r\n                                varNameToString({ summary })\r\n                            )}\r\n                        />\r\n                    )}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Basics;\r\n","const setResumeEducation = (education) => ({\r\n    type: 'SET_RESUME_EDUCATION',\r\n    education,\r\n});\r\n\r\nexport default setResumeEducation;\r\n","import React, { Fragment, useContext } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n// Components\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport ItemInput from './List/ItemInput';\r\nimport ItemsList from './List/ItemsList';\r\n\r\n// Actions\r\nimport style from '../resumeDrawerStyles';\r\nimport setResumeEducation from '../../../store/actions/setResumeEducation';\r\nimport { varNameToString } from '../../../utils/utils';\r\nimport { StoreContext } from '../../../store/StoreProvider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction Education({ education: educations }) {\r\n    const classes = useStyles();\r\n    const { state, dispatch } = useContext(StoreContext);\r\n\r\n    const setResumeEducationState = (education) => {\r\n        dispatch(setResumeEducation(education));\r\n    };\r\n\r\n    const toggleEducations = () => {\r\n        const currentState = educations.enabled;\r\n        setResumeEducationState({\r\n            ...educations,\r\n            enabled: !currentState,\r\n        });\r\n    };\r\n\r\n    const toggleEducation = (education) => {\r\n        const newEducation = { ...educations };\r\n        newEducation.value =\r\n            newEducation.value.map((edu) => {\r\n                if (JSON.stringify(edu.value) === JSON.stringify(education.value)) {\r\n                    return {\r\n                        ...edu,\r\n                        enabled: !edu.enabled,\r\n                    };\r\n                }\r\n                return edu;\r\n            });\r\n        setResumeEducationState(newEducation);\r\n    };\r\n\r\n    const toggleEducationDetail = (education, propName) => {\r\n        const newEducation = { ...educations };\r\n        newEducation.value =\r\n            newEducation.value.map((edu) => {\r\n                if (JSON.stringify(edu.value) === JSON.stringify(education.value)) {\r\n                    return {\r\n                        ...edu,\r\n                        value: {\r\n                            ...edu.value,\r\n                            [propName]: {\r\n                                ...edu.value[propName],\r\n                                enabled: !edu.value[propName].enabled,\r\n                            },\r\n                        },\r\n                    };\r\n                }\r\n                return edu;\r\n            });\r\n        setResumeEducationState(newEducation);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                label=\"education\"\r\n                checked={educations.enabled}\r\n                onChange={toggleEducations}\r\n            />\r\n            {educations.enabled && (\r\n                <ul>\r\n                    {educations.value.map((education) => {\r\n                        const {\r\n                            institution,\r\n                            area,\r\n                            studyType,\r\n                            startDate,\r\n                            endDate,\r\n                            gpa,\r\n                            courses,\r\n                        } = education.value;\r\n                        return (\r\n                            <Fragment key={uuid()}>\r\n                                <ItemsList\r\n                                    label={institution.value}\r\n                                    checked={education.enabled}\r\n                                    onClick={() => toggleEducation(\r\n                                        education\r\n                                    )}\r\n                                />\r\n                                {educations.enabled && (\r\n                                    <ul>\r\n                                        <ItemsList\r\n                                            label={varNameToString({ institution })}\r\n                                            checked={institution.enabled}\r\n                                            onClick={() => toggleEducationDetail(\r\n                                                education,\r\n                                                varNameToString({ institution })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ area })}\r\n                                            checked={area.enabled}\r\n                                            onClick={() => toggleEducationDetail(\r\n                                                education,\r\n                                                varNameToString({ area })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ studyType })}\r\n                                            checked={studyType.enabled}\r\n                                            onClick={() => toggleEducationDetail(\r\n                                                education,\r\n                                                varNameToString({ studyType })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ startDate })}\r\n                                            checked={startDate.enabled}\r\n                                            onClick={() => toggleEducationDetail(\r\n                                                education,\r\n                                                varNameToString({ startDate })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ endDate })}\r\n                                            checked={endDate.enabled}\r\n                                            onClick={() => toggleEducationDetail(\r\n                                                education,\r\n                                                varNameToString({ endDate })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ gpa })}\r\n                                            checked={gpa.enabled}\r\n                                            onClick={() => toggleEducationDetail(\r\n                                                education,\r\n                                                varNameToString({ gpa })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ courses })}\r\n                                            checked={courses.enabled}\r\n                                            onClick={() => toggleEducationDetail(\r\n                                                education,\r\n                                                varNameToString({ courses })\r\n                                            )}\r\n                                        />\r\n                                    </ul>\r\n                                )}\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Education;\r\n","const setResumeInterests = (interests) => ({\r\n    type: 'SET_RESUME_INTERESTS',\r\n    interests,\r\n});\r\n\r\nexport default setResumeInterests;\r\n","import React, { Fragment, useContext } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n// Components\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport ItemInput from './List/ItemInput';\r\nimport ItemsList from './List/ItemsList';\r\n\r\n// Utils\r\n// Actions\r\nimport style from '../resumeDrawerStyles';\r\nimport { varNameToString } from '../../../utils/utils';\r\nimport setResumeInterests from '../../../store/actions/setResumeInterests';\r\nimport { StoreContext } from '../../../store/StoreProvider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction Interest({ interests }) {\r\n    const classes = useStyles();\r\n    const { state, dispatch } = useContext(StoreContext);\r\n    const setResumeInterestsState = (interest) => {\r\n        dispatch(setResumeInterests(interest));\r\n    };\r\n\r\n    const toggleInterests = () => {\r\n        const currentState = interests.enabled;\r\n        setResumeInterestsState({\r\n            ...interests,\r\n            enabled: !currentState,\r\n        });\r\n    };\r\n\r\n    const toggleInterest = (interest) => {\r\n        const newInterest = { ...interests };\r\n        newInterest.value =\r\n            newInterest.value.map((wrk) => {\r\n                if (JSON.stringify(wrk.value) === JSON.stringify(interest.value)) {\r\n                    return {\r\n                        ...wrk,\r\n                        enabled: !wrk.enabled,\r\n                    };\r\n                }\r\n                return wrk;\r\n            });\r\n        setResumeInterestsState(newInterest);\r\n    };\r\n\r\n    const toggleInterestDetail = (interest, propName) => {\r\n        const newInterest = { ...interests };\r\n        newInterest.value =\r\n            newInterest.value.map((vol) => {\r\n                if (JSON.stringify(vol.value) === JSON.stringify(interest.value)) {\r\n                    return {\r\n                        ...vol,\r\n                        value: {\r\n                            ...vol.value,\r\n                            [propName]: {\r\n                                ...vol.value[propName],\r\n                                enabled: !vol.value[propName].enabled,\r\n                            },\r\n                        },\r\n                    };\r\n                }\r\n                return vol;\r\n            });\r\n        setResumeInterestsState(newInterest);\r\n    };\r\n\r\n    const toggleInterestKeywords = (interest, keyword) => {\r\n        const newInterest = { ...interests };\r\n        newInterest.value =\r\n            newInterest.value.map((vol) => {\r\n                if (JSON.stringify(vol.value) === JSON.stringify(interest.value)) {\r\n                    return {\r\n                        ...vol,\r\n                        value: {\r\n                            ...vol.value,\r\n                            keywords: {\r\n                                ...vol.value.keywords,\r\n                                value: [\r\n                                    ...vol.value.keywords.value.map((key) => {\r\n                                        if (JSON.stringify(key.value) === JSON.stringify(keyword.value)) {\r\n                                            return {\r\n                                                ...key,\r\n                                                enabled: !key.enabled,\r\n                                            };\r\n                                        }\r\n\r\n                                        return key;\r\n                                    }),\r\n                                ],\r\n                            },\r\n                        },\r\n                    };\r\n                }\r\n                return vol;\r\n            });\r\n        setResumeInterestsState(newInterest);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                label=\"interest\"\r\n                onChange={toggleInterests}\r\n                checked={interests.enabled}\r\n            />\r\n            {interests.enabled && (\r\n                <ul>\r\n                    {interests.value.map((interest) => {\r\n                        const { name, keywords } = interest.value;\r\n\r\n                        return (\r\n                            <Fragment key={uuid()}>\r\n                                <ItemsList\r\n                                    label={name.value}\r\n                                    checked={interest.enabled}\r\n                                    onClick={() => toggleInterest(interest)}\r\n                                />\r\n                                {interest.enabled && (\r\n                                    <ul>\r\n                                        <ItemsList\r\n                                            label={varNameToString({ name })}\r\n                                            checked={name.enabled}\r\n                                            onClick={() => toggleInterestDetail(\r\n                                                interest,\r\n                                                varNameToString({ name })\r\n                                            )}\r\n                                        />\r\n                                        {keywords.enabled && (\r\n                                            <ul>\r\n                                                {keywords.value.map((keyword) => (\r\n                                                    <ItemsList\r\n                                                        label={keyword.value}\r\n                                                        key={uuid()}\r\n                                                        checked={keyword.enabled}\r\n                                                        onClick={() => toggleInterestKeywords(\r\n                                                            interest,\r\n                                                            keyword\r\n                                                        )}\r\n                                                    />\r\n                                                ))}\r\n                                            </ul>\r\n                                        )}\r\n                                    </ul>\r\n                                )}\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Interest;\r\n","const setResumeLanguages = (languages) => ({\r\n    type: 'SET_RESUME_LANGUAGES',\r\n    languages,\r\n});\r\n\r\nexport default setResumeLanguages;\r\n","import React, { Fragment, useContext } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n// Components\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport ItemInput from './List/ItemInput';\r\nimport ItemsList from './List/ItemsList';\r\n\r\n// Actions\r\nimport style from '../resumeDrawerStyles';\r\nimport setResumeLanguages from '../../../store/actions/setResumeLanguages';\r\nimport { varNameToString } from '../../../utils/utils';\r\nimport { StoreContext } from '../../../store/StoreProvider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction Languages({ languages }) {\r\n    const classes = useStyles();\r\n    const { state, dispatch } = useContext(StoreContext);\r\n    const setResumeLanguagesState = (newLanguages) => {\r\n        dispatch(setResumeLanguages(newLanguages));\r\n    };\r\n\r\n    const toggleLanguages = () => {\r\n        const currentState = languages.enabled;\r\n        setResumeLanguagesState({\r\n            ...languages,\r\n            enabled: !currentState,\r\n        });\r\n    };\r\n\r\n    const toggleLanguage = (language) => {\r\n        const newLanguages = { ...languages };\r\n        newLanguages.value =\r\n            newLanguages.value.map((lang) => {\r\n                if (JSON.stringify(lang.value) === JSON.stringify(language.value)) {\r\n                    return {\r\n                        ...lang,\r\n                        enabled: !lang.enabled,\r\n                    };\r\n                }\r\n                return lang;\r\n            });\r\n        setResumeLanguagesState(newLanguages);\r\n    };\r\n\r\n    const toggleLanguagesDetail = (language, propName) => {\r\n        const newLanguages = { ...languages };\r\n        newLanguages.value =\r\n            newLanguages.value.map((lang) => {\r\n                if (JSON.stringify(lang.value) === JSON.stringify(language.value)) {\r\n                    return {\r\n                        ...lang,\r\n                        value: {\r\n                            ...lang.value,\r\n                            [propName]: {\r\n                                ...lang.value[propName],\r\n                                enabled: !lang.value[propName].enabled,\r\n                            },\r\n                        },\r\n                    };\r\n                }\r\n                return lang;\r\n            });\r\n        setResumeLanguagesState(newLanguages);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                label=\"languages\"\r\n                onChange={toggleLanguages}\r\n                checked={languages.enabled}\r\n            />\r\n            {languages.enabled && (\r\n                <ul>\r\n                    {languages.value.map((lang) => {\r\n                        const {\r\n                            language,\r\n                            fluency,\r\n                        } = lang.value;\r\n                        return (\r\n                            <Fragment key={uuid()}>\r\n                                <ItemsList\r\n                                    label={language.value}\r\n                                    checked={lang.enabled}\r\n                                    onClick={() => toggleLanguage(lang)}\r\n                                />\r\n                                {lang.enabled && (\r\n                                    <ul>\r\n                                        <ItemsList\r\n                                            label={varNameToString({ language })}\r\n                                            checked={language.enabled}\r\n                                            onClick={() => toggleLanguagesDetail(\r\n                                                lang,\r\n                                                varNameToString({ language })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ fluency })}\r\n                                            checked={fluency.enabled}\r\n                                            onClick={() => toggleLanguagesDetail(\r\n                                                lang,\r\n                                                varNameToString({ fluency })\r\n                                            )}\r\n                                        />\r\n                                    </ul>\r\n                                )}\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Languages;\r\n","const setResumePublications = (publications) => ({\r\n    type: 'SET_RESUME_PUBLICATIONS',\r\n    publications,\r\n});\r\n\r\nexport default setResumePublications;\r\n","import React, { Fragment, useContext } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n// Components\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport ItemInput from './List/ItemInput';\r\nimport ItemsList from './List/ItemsList';\r\n\r\n// Actions\r\nimport style from '../resumeDrawerStyles';\r\nimport setResumePublications from '../../../store/actions/setResumePublications';\r\nimport { varNameToString } from '../../../utils/utils';\r\nimport { StoreContext } from '../../../store/StoreProvider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction Publications({ publications }) {\r\n    const classes = useStyles();\r\n    const { state, dispatch } = useContext(StoreContext);\r\n    const setResumePublicationsState = (newPublications) => {\r\n        dispatch(setResumePublications(newPublications));\r\n    };\r\n\r\n    const togglePublications = () => {\r\n        const currentState = publications.enabled;\r\n        setResumePublicationsState({\r\n            ...publications,\r\n            enabled: !currentState,\r\n        });\r\n    };\r\n\r\n    const togglePublication = (publication) => {\r\n        const newPublications = { ...publications };\r\n        newPublications.value =\r\n            newPublications.value.map((pub) => {\r\n                if (JSON.stringify(pub.value) === JSON.stringify(publication.value)) {\r\n                    return {\r\n                        ...pub,\r\n                        enabled: !pub.enabled,\r\n                    };\r\n                }\r\n                return pub;\r\n            });\r\n        setResumePublicationsState(newPublications);\r\n    };\r\n\r\n    const togglePublicationsDetail = (publication, propName) => {\r\n        const newPublications = { ...publications };\r\n        newPublications.value =\r\n            newPublications.value.map((pub) => {\r\n                if (JSON.stringify(pub.value) === JSON.stringify(publication.value)) {\r\n                    return {\r\n                        ...pub,\r\n                        value: {\r\n                            ...pub.value,\r\n                            [propName]: {\r\n                                ...pub.value[propName],\r\n                                enabled: !pub.value[propName].enabled,\r\n                            },\r\n                        },\r\n                    };\r\n                }\r\n                return pub;\r\n            });\r\n        setResumePublicationsState(newPublications);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                label=\"publications\"\r\n                onChange={togglePublications}\r\n                checked={publications.enabled}\r\n            />\r\n            {publications.enabled && (\r\n                <ul>\r\n                    {publications.value.map((publication) => {\r\n                        const {\r\n                            name,\r\n                            publisher,\r\n                            releaseDate,\r\n                            website,\r\n                            summary,\r\n                        } = publication.value;\r\n                        return (\r\n                            <Fragment key={uuid()}>\r\n                                <ItemsList\r\n                                    label={name.value}\r\n                                    checked={publication.enabled}\r\n                                    onClick={() => togglePublication(publication)}\r\n                                />\r\n                                {publication.enabled && (\r\n                                    <ul>\r\n                                        <ItemsList\r\n                                            label={varNameToString({ name })}\r\n                                            checked={name.enabled}\r\n                                            onClick={() => togglePublicationsDetail(\r\n                                                publication,\r\n                                                varNameToString({ name })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ publisher })}\r\n                                            checked={publisher.enabled}\r\n                                            onClick={() => togglePublicationsDetail(\r\n                                                publication,\r\n                                                varNameToString({ publisher })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ releaseDate })}\r\n                                            checked={releaseDate.enabled}\r\n                                            onClick={() => togglePublicationsDetail(\r\n                                                publication,\r\n                                                varNameToString({ releaseDate })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ website })}\r\n                                            checked={website.enabled}\r\n                                            onClick={() => togglePublicationsDetail(\r\n                                                publication,\r\n                                                varNameToString({ website })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ summary })}\r\n                                            checked={summary.enabled}\r\n                                            onClick={() => togglePublicationsDetail(\r\n                                                publication,\r\n                                                varNameToString({ summary })\r\n                                            )}\r\n                                        />\r\n                                    </ul>\r\n                                )}\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Publications;\r\n","const setResumeReferences = (references) => ({\r\n    type: 'SET_RESUME_REFERENCES',\r\n    references,\r\n});\r\n\r\nexport default setResumeReferences;\r\n","import React, { Fragment, useContext } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n// Components\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport ItemInput from './List/ItemInput';\r\nimport ItemsList from './List/ItemsList';\r\n\r\n// Actions\r\nimport style from '../resumeDrawerStyles';\r\nimport setResumeReferences from '../../../store/actions/setResumeReferences';\r\nimport { varNameToString } from '../../../utils/utils';\r\nimport { StoreContext } from '../../../store/StoreProvider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction References({ references }) {\r\n    const classes = useStyles();\r\n    const { state, dispatch } = useContext(StoreContext);\r\n    const setResumeReferencesState = (newReferences) => {\r\n        dispatch(setResumeReferences(newReferences));\r\n    };\r\n\r\n    const toggleReferences = () => {\r\n        const currentState = references.enabled;\r\n        setResumeReferencesState({\r\n            ...references,\r\n            enabled: !currentState,\r\n        });\r\n    };\r\n\r\n    const toggleReference = (reference) => {\r\n        const newReferences = { ...references };\r\n        newReferences.value =\r\n            newReferences.value.map((ref) => {\r\n                if (JSON.stringify(ref.value) === JSON.stringify(reference.value)) {\r\n                    return {\r\n                        ...ref,\r\n                        enabled: !ref.enabled,\r\n                    };\r\n                }\r\n                return ref;\r\n            });\r\n        setResumeReferencesState(newReferences);\r\n    };\r\n\r\n    const toggleReferencesDetail = (reference, propName) => {\r\n        const newReferences = { ...references };\r\n        newReferences.value =\r\n            newReferences.value.map((ref) => {\r\n                if (JSON.stringify(ref.value) === JSON.stringify(reference.value)) {\r\n                    return {\r\n                        ...ref,\r\n                        value: {\r\n                            ...ref.value,\r\n                            [propName]: {\r\n                                ...ref.value[propName],\r\n                                enabled: !ref.value[propName].enabled,\r\n                            },\r\n                        },\r\n                    };\r\n                }\r\n                return ref;\r\n            });\r\n        setResumeReferencesState(newReferences);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                label=\"references\"\r\n                onChange={toggleReferences}\r\n                checked={references.enabled}\r\n            />\r\n            {references.enabled && (\r\n                <ul>\r\n                    {references.value.map((ref) => {\r\n                        const {\r\n                            name,\r\n                            reference,\r\n                        } = ref.value;\r\n                        return (\r\n                            <Fragment key={uuid()}>\r\n                                <ItemsList\r\n                                    label={name.value}\r\n                                    checked={ref.enabled}\r\n                                    onClick={() => toggleReference(ref)}\r\n                                />\r\n                                {ref.enabled && (\r\n                                    <ul>\r\n                                        <ItemsList\r\n                                            label={varNameToString({ name })}\r\n                                            checked={name.enabled}\r\n                                            onClick={() => toggleReferencesDetail(\r\n                                                ref,\r\n                                                varNameToString({ name })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ reference })}\r\n                                            checked={reference.enabled}\r\n                                            onClick={() => toggleReferencesDetail(\r\n                                                ref,\r\n                                                varNameToString({ reference })\r\n                                            )}\r\n                                        />\r\n                                    </ul>\r\n                                )}\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default References;\r\n","const setResumeSkills = (skills) => ({\r\n    type: 'SET_RESUME_SKILLS',\r\n    skills,\r\n});\r\n\r\nexport default setResumeSkills;\r\n","import React, { Fragment, useContext } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n// Components\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport ItemInput from './List/ItemInput';\r\nimport ItemsList from './List/ItemsList';\r\n\r\n// Actions\r\nimport style from '../resumeDrawerStyles';\r\nimport setResumeSkills from '../../../store/actions/setResumeSkills';\r\nimport { varNameToString } from '../../../utils/utils';\r\nimport { StoreContext } from '../../../store/StoreProvider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction Skills({ skills }) {\r\n    const classes = useStyles();\r\n    const { state, dispatch } = useContext(StoreContext);\r\n    const setResumeSkillsState = (newSkills) => {\r\n        dispatch(setResumeSkills(newSkills));\r\n    };\r\n\r\n    const toggleSkills = () => {\r\n        const currentState = skills.enabled;\r\n        setResumeSkillsState({\r\n            ...skills,\r\n            enabled: !currentState,\r\n        });\r\n    };\r\n\r\n    const toggleSkill = (skill) => {\r\n        const newSkills = { ...skills };\r\n        newSkills.value =\r\n            newSkills.value.map((skl) => {\r\n                if (JSON.stringify(skl.value) === JSON.stringify(skill.value)) {\r\n                    return {\r\n                        ...skl,\r\n                        enabled: !skl.enabled,\r\n                    };\r\n                }\r\n                return skl;\r\n            });\r\n        setResumeSkillsState(newSkills);\r\n    };\r\n\r\n    const toggleSkillsDetail = (skill, propName) => {\r\n        const newSkills = { ...skills };\r\n        newSkills.value =\r\n            newSkills.value.map((skl) => {\r\n                if (JSON.stringify(skl.value) === JSON.stringify(skill.value)) {\r\n                    return {\r\n                        ...skl,\r\n                        value: {\r\n                            ...skl.value,\r\n                            [propName]: {\r\n                                ...skl.value[propName],\r\n                                enabled: !skl.value[propName].enabled,\r\n                            },\r\n                        },\r\n                    };\r\n                }\r\n                return skl;\r\n            });\r\n        setResumeSkillsState(newSkills);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                label=\"skills\"\r\n                onChange={toggleSkills}\r\n                checked={skills.enabled}\r\n            />\r\n            {skills.enabled && (\r\n                <ul>\r\n                    {skills.value.map((skill) => {\r\n                        const { keywords, level, name } = skill.value;\r\n                        return (\r\n                            <Fragment key={uuid()}>\r\n                                <ItemsList\r\n                                    label={name.value}\r\n                                    checked={skill.enabled}\r\n                                    onClick={() => toggleSkill(skill)}\r\n                                />\r\n                                {skill.enabled && (\r\n                                    <ul>\r\n                                        <ItemsList\r\n                                            label={varNameToString({ keywords })}\r\n                                            checked={keywords.enabled}\r\n                                            onClick={() => toggleSkillsDetail(\r\n                                                skill,\r\n                                                varNameToString({ keywords })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ level })}\r\n                                            checked={level.enabled}\r\n                                            onClick={() => toggleSkillsDetail(\r\n                                                skill,\r\n                                                varNameToString({ level })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ name })}\r\n                                            checked={name.enabled}\r\n                                            onClick={() => toggleSkillsDetail(\r\n                                                skill,\r\n                                                varNameToString({ name })\r\n                                            )}\r\n                                        />\r\n                                    </ul>\r\n                                )}\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Skills;\r\n","const setResumeVolunteer = (volunteer) => ({\r\n    type: 'SET_RESUME_VOLUNTEER',\r\n    volunteer,\r\n});\r\n\r\nexport default setResumeVolunteer;\r\n","import React, { Fragment, useContext } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n// Components\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport ItemInput from './List/ItemInput';\r\nimport ItemsList from './List/ItemsList';\r\n\r\n// Utils\r\nimport { varNameToString } from '../../../utils/utils';\r\n\r\n// Styles\r\nimport style from '../resumeDrawerStyles';\r\n\r\n// Actions\r\nimport setResumeVolunteer from '../../../store/actions/setResumeVolunteer';\r\n\r\n// Context\r\nimport { StoreContext } from '../../../store/StoreProvider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction Volunteer({ volunteer: volunteerData }) {\r\n    const classes = useStyles();\r\n    const { state, dispatch } = useContext(StoreContext);\r\n    const setResumeVolunteerState = (volunteer) => {\r\n        dispatch(setResumeVolunteer(volunteer));\r\n    };\r\n\r\n    const toggleVolunteers = () => {\r\n        const currentState = volunteerData.enabled;\r\n        setResumeVolunteerState({\r\n            ...volunteerData,\r\n            enabled: !currentState,\r\n        });\r\n    };\r\n\r\n    const toggleVolunteer = (volunteer) => {\r\n        const newVolunteer = { ...volunteerData };\r\n        newVolunteer.value =\r\n            newVolunteer.value.map((wrk) => {\r\n                if (JSON.stringify(wrk.value) === JSON.stringify(volunteer.value)) {\r\n                    return {\r\n                        ...wrk,\r\n                        enabled: !wrk.enabled,\r\n                    };\r\n                }\r\n                return wrk;\r\n            });\r\n        setResumeVolunteerState(newVolunteer);\r\n    };\r\n\r\n    const toggleVolunteerDetail = (volunteer, propName) => {\r\n        const newVolunteer = { ...volunteerData };\r\n        newVolunteer.value =\r\n            newVolunteer.value.map((vol) => {\r\n                if (JSON.stringify(vol.value) === JSON.stringify(volunteer.value)) {\r\n                    return {\r\n                        ...vol,\r\n                        value: {\r\n                            ...vol.value,\r\n                            [propName]: {\r\n                                ...vol.value[propName],\r\n                                enabled: !vol.value[propName].enabled,\r\n                            },\r\n                        },\r\n                    };\r\n                }\r\n                return vol;\r\n            });\r\n        setResumeVolunteerState(newVolunteer);\r\n    };\r\n\r\n    const toggleVolunteerHighlights = (volunteer, highlight) => {\r\n        const newVolunteer = { ...volunteerData };\r\n        newVolunteer.value =\r\n            newVolunteer.value.map((vol) => {\r\n                if (JSON.stringify(vol.value) === JSON.stringify(volunteer.value)) {\r\n                    return {\r\n                        ...vol,\r\n                        value: {\r\n                            ...vol.value,\r\n                            highlights: {\r\n                                ...vol.value.highlights,\r\n                                value: [\r\n                                    ...vol.value.highlights.value.map((high) => {\r\n                                        if (JSON.stringify(high.value) === JSON.stringify(highlight.value)) {\r\n                                            return {\r\n                                                ...high,\r\n                                                enabled: !high.enabled,\r\n                                            };\r\n                                        }\r\n\r\n                                        return high;\r\n                                    }),\r\n                                ],\r\n                            },\r\n                        },\r\n                    };\r\n                }\r\n                return vol;\r\n            });\r\n        setResumeVolunteerState(newVolunteer);\r\n    };\r\n\r\n    const {\r\n        enabled: volunteerEnabled,\r\n        value: volunteers,\r\n    } = volunteerData;\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                label=\"volunteer\"\r\n                onChange={toggleVolunteers}\r\n                checked={volunteerEnabled}\r\n            />\r\n            {volunteerEnabled && (\r\n                <ul>\r\n                    {volunteers.map((volunteer) => {\r\n                        const {\r\n                            organization,\r\n                            position,\r\n                            website,\r\n                            startDate,\r\n                            endDate,\r\n                            summary,\r\n                            highlights,\r\n                        } = volunteer.value;\r\n\r\n                        return (\r\n                            <Fragment key={uuid()}>\r\n                                <ItemsList\r\n                                    label={organization.value}\r\n                                    checked={volunteer.enabled}\r\n                                    onClick={() => toggleVolunteer(volunteer)}\r\n                                />\r\n                                {volunteer.enabled && (\r\n                                    <ul>\r\n                                        <ItemsList\r\n                                            label={varNameToString({ organization })}\r\n                                            checked={organization.enabled}\r\n                                            onClick={() => toggleVolunteerDetail(\r\n                                                volunteer,\r\n                                                varNameToString({ organization })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ position })}\r\n                                            checked={position.enabled}\r\n                                            onClick={() => toggleVolunteerDetail(\r\n                                                volunteer,\r\n                                                varNameToString({ position })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ website })}\r\n                                            checked={website.enabled}\r\n                                            onClick={() => toggleVolunteerDetail(\r\n                                                volunteer,\r\n                                                varNameToString({ website })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ startDate })}\r\n                                            checked={startDate.enabled}\r\n                                            onClick={() => toggleVolunteerDetail(\r\n                                                volunteer,\r\n                                                varNameToString({ startDate })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ endDate })}\r\n                                            checked={endDate.enabled}\r\n                                            onClick={() => toggleVolunteerDetail(\r\n                                                volunteer,\r\n                                                varNameToString({ endDate })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ summary })}\r\n                                            checked={summary.enabled}\r\n                                            onClick={() => toggleVolunteerDetail(\r\n                                                volunteer,\r\n                                                varNameToString({ summary })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ highlights })}\r\n                                            checked={highlights.enabled}\r\n                                            onClick={() => toggleVolunteerDetail(\r\n                                                volunteer,\r\n                                                varNameToString({ highlights })\r\n                                            )}\r\n                                        />\r\n                                        {highlights.enabled && (\r\n                                            <ul>\r\n                                                {highlights.value.map((highlight) => (\r\n                                                    <ItemsList\r\n                                                        label={highlight.value}\r\n                                                        key={uuid()}\r\n                                                        checked={highlight.enabled}\r\n                                                        onClick={() => toggleVolunteerHighlights(\r\n                                                            volunteer,\r\n                                                            highlight\r\n                                                        )}\r\n                                                    />\r\n                                                ))}\r\n                                            </ul>\r\n                                        )}\r\n                                    </ul>\r\n                                )}\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Volunteer;\r\n","const setResumeWork = (work) => ({\r\n    type: 'SET_RESUME_WORK',\r\n    work,\r\n});\r\n\r\nexport default setResumeWork;\r\n","import React, { Fragment, useContext } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n// Components\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport ItemInput from './List/ItemInput';\r\nimport ItemsList from './List/ItemsList';\r\n\r\n// Utils\r\nimport { varNameToString } from '../../../utils/utils';\r\n\r\n// Actions\r\nimport style from '../resumeDrawerStyles';\r\nimport setResumeWork from '../../../store/actions/setResumeWork';\r\nimport { StoreContext } from '../../../store/StoreProvider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n}));\r\n\r\nfunction Work({ work: workData }) {\r\n    const classes = useStyles();\r\n    const { state, dispatch } = useContext(StoreContext);\r\n\r\n    const {\r\n        enabled: workEnabled,\r\n        value: works,\r\n    } = workData;\r\n\r\n    const setResumeWorkState = (newWork) => {\r\n        dispatch(setResumeWork(newWork));\r\n    };\r\n\r\n    const toggleWorks = () => {\r\n        const currentState = workData.enabled;\r\n        setResumeWorkState({\r\n            ...workData,\r\n            enabled: !currentState,\r\n        });\r\n    };\r\n\r\n    const toggleWork = (oldWork) => {\r\n        const newWork = { ...workData };\r\n        newWork.value =\r\n            newWork.value.map((wrk) => {\r\n                if (JSON.stringify(wrk.value) === JSON.stringify(oldWork.value)) {\r\n                    return {\r\n                        ...wrk,\r\n                        enabled: !wrk.enabled,\r\n                    };\r\n                }\r\n                return wrk;\r\n            });\r\n        setResumeWorkState(newWork);\r\n    };\r\n\r\n    const toggleWorkDetail = (oldWork, propName) => {\r\n        const newWork = { ...workData };\r\n        newWork.value =\r\n            newWork.value.map((wrk) => {\r\n                if (JSON.stringify(wrk.value) === JSON.stringify(oldWork.value)) {\r\n                    return {\r\n                        ...wrk,\r\n                        value: {\r\n                            ...wrk.value,\r\n                            [propName]: {\r\n                                ...wrk.value[propName],\r\n                                enabled: !wrk.value[propName].enabled,\r\n                            },\r\n                        },\r\n                    };\r\n                }\r\n                return wrk;\r\n            });\r\n        setResumeWorkState(newWork);\r\n    };\r\n\r\n    const toggleWorkHighlights = (oldWork, highlight) => {\r\n        const newWork = { ...workData };\r\n        newWork.value =\r\n            newWork.value.map((wrk) => {\r\n                if (JSON.stringify(wrk.value) === JSON.stringify(oldWork.value)) {\r\n                    return {\r\n                        ...wrk,\r\n                        value: {\r\n                            ...wrk.value,\r\n                            highlights: {\r\n                                ...wrk.value.highlights,\r\n                                value: [\r\n                                    ...wrk.value.highlights.value.map((high) => {\r\n                                        if (JSON.stringify(high.value) === JSON.stringify(highlight.value)) {\r\n                                            return {\r\n                                                ...high,\r\n                                                enabled: !high.enabled,\r\n                                            };\r\n                                        }\r\n\r\n                                        return high;\r\n                                    }),\r\n                                ],\r\n                            },\r\n                        },\r\n                    };\r\n                }\r\n                return wrk;\r\n            });\r\n        setResumeWorkState(newWork);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItem}>\r\n            <ItemInput\r\n                label=\"work\"\r\n                onChange={toggleWorks}\r\n                checked={workEnabled}\r\n            />\r\n            {workEnabled && (\r\n                <ul>\r\n                    {works.map((work) => {\r\n                        const {\r\n                            company,\r\n                            position,\r\n                            website,\r\n                            startDate,\r\n                            endDate,\r\n                            summary,\r\n                            highlights,\r\n                        } = work.value;\r\n\r\n                        return (\r\n                            <Fragment key={uuid()}>\r\n                                <ItemsList\r\n                                    label={company.value}\r\n                                    checked={work.enabled}\r\n                                    onClick={() => toggleWork(work)}\r\n                                />\r\n                                {work.enabled && (\r\n                                    <ul>\r\n                                        <ItemsList\r\n                                            label={varNameToString({ company })}\r\n                                            checked={company.enabled}\r\n                                            onClick={() => toggleWorkDetail(\r\n                                                work,\r\n                                                varNameToString({ company })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ position })}\r\n                                            checked={position.enabled}\r\n                                            onClick={() => toggleWorkDetail(\r\n                                                work,\r\n                                                varNameToString({ position })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ website })}\r\n                                            checked={website.enabled}\r\n                                            onClick={() => toggleWorkDetail(\r\n                                                work,\r\n                                                varNameToString({ website })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ startDate })}\r\n                                            checked={startDate.enabled}\r\n                                            onClick={() => toggleWorkDetail(\r\n                                                work,\r\n                                                varNameToString({ startDate })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ endDate })}\r\n                                            checked={endDate.enabled}\r\n                                            onClick={() => toggleWorkDetail(\r\n                                                work,\r\n                                                varNameToString({ endDate })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ summary })}\r\n                                            checked={summary.enabled}\r\n                                            onClick={() => toggleWorkDetail(\r\n                                                work,\r\n                                                varNameToString({ summary })\r\n                                            )}\r\n                                        />\r\n                                        <ItemsList\r\n                                            label={varNameToString({ highlights })}\r\n                                            checked={highlights.enabled}\r\n                                            onClick={() => toggleWorkDetail(\r\n                                                work,\r\n                                                varNameToString({ highlights })\r\n                                            )}\r\n                                        />\r\n                                        {highlights.enabled && (\r\n                                            <ul>\r\n                                                {highlights.value.map((highlight) => (\r\n                                                    <ItemsList\r\n                                                        label={highlight.value}\r\n                                                        key={uuid()}\r\n                                                        checked={highlight.enabled}\r\n                                                        onClick={() => toggleWorkHighlights(\r\n                                                            work,\r\n                                                            highlight\r\n                                                        )}\r\n                                                    />\r\n                                                ))}\r\n                                            </ul>\r\n                                        )}\r\n                                    </ul>\r\n                                )}\r\n                            </Fragment>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Work;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useIntl } from 'gatsby-plugin-intl';\r\nimport style from './resumeDrawerStyles';\r\n\r\n// Utils\r\n\r\n// Components\r\nimport Awards from './Items/Awards';\r\nimport Basics from './Items/Basics';\r\nimport Education from './Items/Education';\r\nimport Interests from './Items/Interests';\r\nimport Languages from './Items/Languages';\r\nimport Publications from './Items/Publications';\r\nimport References from './Items/References';\r\nimport Skills from './Items/Skills';\r\nimport Volunteer from './Items/Volunteer';\r\nimport Work from './Items/Work';\r\nimport { isObjectNotEmpty } from '../../utils/utils';\r\nimport { downloadJson } from '../../utils/json-parser';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    ...style,\r\n    actionButtons: {\r\n        display: 'block',\r\n        margin: '10px 10px 10px 0',\r\n    },\r\n}));\r\n\r\nconst printDocument = () => {\r\n    window.print();\r\n};\r\n\r\nconst handleDownloadJson = (jsonResume) => {\r\n    downloadJson(jsonResume);\r\n};\r\n\r\nconst ResumeDrawerItems = ({\r\n    resume: {\r\n        basics,\r\n        work,\r\n        skills,\r\n        education,\r\n        awards,\r\n        volunteer,\r\n        publications,\r\n        languages,\r\n        interests,\r\n        references,\r\n    },\r\n    onClose,\r\n    jsonResume,\r\n    onPrint,\r\n}) => {\r\n    const classes = useStyles();\r\n    const intl = useIntl();\r\n\r\n    return (\r\n        <div className={classes.resumeDrawerItemsWrapper}>\r\n            <button\r\n                type=\"button\"\r\n                onClick={onClose}\r\n            >\r\n                <CloseIcon />\r\n            </button>\r\n            <div>\r\n                <Button\r\n                    className={classes.actionButtons}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    disabled\r\n                >\r\n                    {intl.formatMessage({ id: 'download_doc' })}\r\n                </Button>\r\n                <Button\r\n                    className={classes.actionButtons}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => handleDownloadJson(jsonResume)}\r\n                >\r\n                    {intl.formatMessage({ id: 'download_json' })}\r\n                </Button>\r\n                <Button\r\n                    className={classes.actionButtons}\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={onPrint || printDocument}\r\n                >\r\n                    {intl.formatMessage({ id: 'print' })}\r\n                </Button>\r\n            </div>\r\n            {isObjectNotEmpty(basics) && (\r\n                <Basics\r\n                    basics={basics}\r\n                />\r\n            )}\r\n            {isObjectNotEmpty(work) && (\r\n                <Work\r\n                    work={work}\r\n                />\r\n            )}\r\n            {isObjectNotEmpty(skills) && (\r\n                <Skills\r\n                    skills={skills}\r\n                />\r\n            )}\r\n            {isObjectNotEmpty(education) && (\r\n                <Education\r\n                    education={education}\r\n                />\r\n            )}\r\n            {isObjectNotEmpty(awards) && (\r\n                <Awards\r\n                    awards={awards}\r\n                />\r\n            )}\r\n            {isObjectNotEmpty(volunteer) && (\r\n                <Volunteer\r\n                    volunteer={volunteer}\r\n                />\r\n            )}\r\n            {isObjectNotEmpty(publications) && (\r\n                <Publications\r\n                    publications={publications}\r\n                />\r\n            )}\r\n            {isObjectNotEmpty(languages) && (\r\n                <Languages\r\n                    languages={languages}\r\n                />\r\n            )}\r\n            {isObjectNotEmpty(interests) && (\r\n                <Interests\r\n                    interests={interests}\r\n                />\r\n            )}\r\n            {isObjectNotEmpty(references) && (\r\n                <References\r\n                    references={references}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResumeDrawerItems;\r\n","import React from 'react';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    floatingButton: {\r\n        margin: '10px 10px 0 0 !important',\r\n        position: 'fixed !important',\r\n        right: 0,\r\n    },\r\n}));\r\nconst FloatingButton = ({ onClick }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Fab\r\n            color=\"primary\"\r\n            aria-label=\"add\"\r\n            onClick={onClick}\r\n            className={classes.floatingButton}\r\n        >\r\n            <MenuIcon />\r\n        </Fab>\r\n    );\r\n};\r\n\r\nexport default FloatingButton;\r\n","/* eslint template-curly-spacing: 0, indent: 0 */\r\nimport React, { Suspense, lazy, useContext, useEffect, useState, useRef, useCallback } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Drawer } from '@material-ui/core';\r\nimport { navigate, useIntl } from 'gatsby-plugin-intl';\r\nimport { v4 as uuid } from 'uuid';\r\nimport SEO from '../components/SEO';\r\nimport Layout from '../components/Layout';\r\nimport A4Container from '../components/A4Container';\r\nimport { StoreContext } from '../store/StoreProvider';\r\nimport { isObjectNotEmpty } from '../utils/utils';\r\nimport ResumeDrawerItems from '../components/ResumeDrawerItems/ResumeDrawerItems';\r\nimport FloatingButton from '../components/FloatingButton';\r\n// import DefaultTemplate from '../components/ResumeTemplates/Default/Index';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    resumeWrapper: {\r\n        margin: '10px 0',\r\n    },\r\n    drawerWrapper: {\r\n        '& .MuiPaper-root': {\r\n            zIndex: 1000,\r\n        },\r\n    },\r\n}));\r\n\r\nconst importTemplate = (template) => lazy(() =>\r\n    import(`../components/ResumeTemplates/${template}/Index`).catch(() =>\r\n        import('../components/ResumeTemplates/Default/Index')));\r\n\r\nconst BuildPage = () => {\r\n    const intl = useIntl();\r\n    const classes = useStyles();\r\n    const [a4ContainerHeight, setA4ContainerHeight] = useState(null);\r\n    const [isDrawerOpen, setIsDrawerOpen] = useState(false);\r\n    const [resumeTemplate, setResumeTemplate] = useState([]);\r\n    const { state, dispatch } = useContext(StoreContext);\r\n    const refContainer = useRef(null);\r\n    const rerenderRef = useRef(false);\r\n    // console.log(JSON.stringify(state));\r\n    // console.log(state.resumeTemplate);\r\n    const {\r\n        jsonResume,\r\n        togglableJsonResume,\r\n        resumeTemplate: resumeTemplateName,\r\n    } = state;\r\n    const hasData = isObjectNotEmpty(togglableJsonResume) && isObjectNotEmpty(jsonResume);\r\n    // console.log(togglableJsonResume);\r\n\r\n    useEffect(() => {\r\n        if (!hasData) {\r\n            navigate('/');\r\n        }\r\n    }, [hasData]);\r\n\r\n    useEffect(() => {\r\n        async function loadTemplate() {\r\n            const Template = await importTemplate(resumeTemplateName);\r\n            setResumeTemplate([\r\n                <Template\r\n                    key={uuid()}\r\n                    resume={togglableJsonResume}\r\n                />,\r\n            ]);\r\n        }\r\n        loadTemplate();\r\n    }, [resumeTemplateName, togglableJsonResume]);\r\n\r\n    const printDocument = useCallback(() => {\r\n        const size = 1122; // roughly A4\r\n        const resumeHeight = refContainer?.current?.clientHeight;\r\n        const ratio = resumeHeight / size;\r\n        if (resumeHeight && ratio > 1) {\r\n            const vhs = Math.ceil(\r\n                parseFloat(ratio.toFixed(2))\r\n            );\r\n            setA4ContainerHeight(vhs * 100);\r\n        } else {\r\n            window.print();\r\n        }\r\n    }, [refContainer]);\r\n\r\n    useEffect(() => {\r\n        // hack to make the printable page background correct\r\n        if (rerenderRef.current) {\r\n            if (a4ContainerHeight) {\r\n                window.print();\r\n                window.setTimeout(() => {\r\n                    setA4ContainerHeight(null);\r\n                }, 10);\r\n            }\r\n        } else {\r\n            rerenderRef.current = true;\r\n        }\r\n    }, [a4ContainerHeight]);\r\n\r\n    return (\r\n        <Layout\r\n            // showLanguageSelector={false}\r\n        >\r\n            <SEO\r\n                title={intl.formatMessage({ id: 'build_resume' })}\r\n                robots=\"noindex, nofollow\"\r\n            />\r\n            {hasData && (\r\n                <div className={classes.resumeWrapper}>\r\n                    <FloatingButton\r\n                        onClick={() => setIsDrawerOpen(true)}\r\n                    />\r\n                    <Drawer\r\n                        className={classes.drawerWrapper}\r\n                        anchor=\"right\"\r\n                        variant=\"persistent\"\r\n                        open={isDrawerOpen}\r\n                        onClose={() => setIsDrawerOpen(false)}\r\n                    >\r\n                        <ResumeDrawerItems\r\n                            resume={togglableJsonResume}\r\n                            jsonResume={jsonResume}\r\n                            onClose={() => setIsDrawerOpen(false)}\r\n                            onPrint={printDocument}\r\n                        />\r\n                    </Drawer>\r\n                    <div\r\n                        ref={refContainer}\r\n                    >\r\n                        <A4Container\r\n                            alignCenter={!isDrawerOpen}\r\n                            customHeight={a4ContainerHeight}\r\n                        >\r\n                            <Suspense\r\n                                fallback=\"Loading...\"\r\n                            >\r\n                                {resumeTemplate}\r\n                            </Suspense>\r\n                        </A4Container>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default BuildPage;\r\n","export const readJsonFile = (file, callback) => {\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => callback(e.target.result);\r\n    // eslint-disable-next-line standard/no-callback-literal\r\n    reader.onerror = () => callback('{}');\r\n    reader.readAsBinaryString(file);\r\n};\r\n\r\nexport const downloadJson = (jsonResume) => {\r\n    const jsonString = JSON.stringify(jsonResume);\r\n    const timestamp = new Date().getTime();\r\n    const anchor = document.createElement('a');\r\n    const file = new Blob([jsonString], { type: 'text/json' });\r\n\r\n    anchor.href = URL.createObjectURL(file);\r\n    anchor.download = `jsonResume-${timestamp}.json`;\r\n    anchor.click();\r\n};\r\n","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({}, theme.typography.button, {\n      boxSizing: 'border-box',\n      minHeight: 36,\n      transition: theme.transitions.create(['background-color', 'box-shadow', 'border'], {\n        duration: theme.transitions.duration.short\n      }),\n      borderRadius: '50%',\n      padding: 0,\n      minWidth: 0,\n      width: 56,\n      height: 56,\n      boxShadow: theme.shadows[6],\n      '&:active': {\n        boxShadow: theme.shadows[12]\n      },\n      color: theme.palette.getContrastText(theme.palette.grey[300]),\n      backgroundColor: theme.palette.grey[300],\n      '&:hover': {\n        backgroundColor: theme.palette.grey.A100,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.grey[300]\n        },\n        '&$disabled': {\n          backgroundColor: theme.palette.action.disabledBackground\n        },\n        textDecoration: 'none'\n      },\n      '&$focusVisible': {\n        boxShadow: theme.shadows[6]\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled,\n        boxShadow: theme.shadows[0],\n        backgroundColor: theme.palette.action.disabledBackground\n      }\n    }),\n\n    /* Styles applied to the span element that wraps the children. */\n    label: {\n      width: '100%',\n      // assure the correct width for iOS Safari\n      display: 'inherit',\n      alignItems: 'inherit',\n      justifyContent: 'inherit'\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    primary: {\n      color: theme.palette.primary.contrastText,\n      backgroundColor: theme.palette.primary.main,\n      '&:hover': {\n        backgroundColor: theme.palette.primary.dark,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.primary.main\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    secondary: {\n      color: theme.palette.secondary.contrastText,\n      backgroundColor: theme.palette.secondary.main,\n      '&:hover': {\n        backgroundColor: theme.palette.secondary.dark,\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.secondary.main\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"extended\"`. */\n    extended: {\n      borderRadius: 48 / 2,\n      padding: '0 16px',\n      width: 'auto',\n      minHeight: 'auto',\n      minWidth: 48,\n      height: 48,\n      '&$sizeSmall': {\n        width: 'auto',\n        padding: '0 8px',\n        borderRadius: 34 / 2,\n        minWidth: 34,\n        height: 34\n      },\n      '&$sizeMedium': {\n        width: 'auto',\n        padding: '0 16px',\n        borderRadius: 40 / 2,\n        minWidth: 40,\n        height: 40\n      }\n    },\n\n    /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */\n    focusVisible: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the root element if `size=\"small\"``. */\n    sizeSmall: {\n      width: 40,\n      height: 40\n    },\n\n    /* Styles applied to the root element if `size=\"medium\"``. */\n    sizeMedium: {\n      width: 48,\n      height: 48\n    }\n  };\n};\nvar Fab = /*#__PURE__*/React.forwardRef(function Fab(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'button' : _props$component,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableFocusRi = props.disableFocusRipple,\n      disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,\n      focusVisibleClassName = props.focusVisibleClassName,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'large' : _props$size,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'round' : _props$variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"disableFocusRipple\", \"focusVisibleClassName\", \"size\", \"variant\"]);\n\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    className: clsx(classes.root, className, variant !== \"round\" && classes.extended, size !== 'large' && classes[\"size\".concat(capitalize(size))], disabled && classes.disabled, {\n      'primary': classes.primary,\n      'secondary': classes.secondary,\n      'inherit': classes.colorInherit\n    }[color]),\n    component: component,\n    disabled: disabled,\n    focusRipple: !disableFocusRipple,\n    focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),\n    ref: ref\n  }, other), /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.label\n  }, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFab'\n})(Fab);","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');\n\nexports.default = _default;","var map = {\n\t\"./Default/Index\": [\n\t\t\"8/2X\",\n\t\t2\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"bjeo\";\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}